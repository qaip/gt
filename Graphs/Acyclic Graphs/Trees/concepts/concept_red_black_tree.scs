concept_red_black_tree
=> nrel_main_idtf:
	[красно-черное дерево] (* <- lang_ru;; *);
	[red-black tree] (* <- lang_en;; *);


=> nrel_inclusion:
concept_aa_tree;;

definition -> definition_of_red_black_tree (*
	-> rrel_key_sc_element: concept_red_black_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Сбалансированное двоичное дерево поиска, в котором каждый узел помечен красным или черным цветом] (* <- lang_ru;; *);;
		-> [A balanced binary search tree in which each node is colored either red or black] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (красно-черное дерево)] (* <- lang_ru;; *);
		[Def. (red-black tree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_binary_search_tree;
		concept_balanced_tree;
		concept_vertex;
		rrel_vertex;
		nrel_color
	};;
*);;

statement -> statement_of_theorem_red_black_property (*
	-> rrel_key_sc_element: concept_red_black_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Для любого красно-черного дерева с n внутренними узлами глубина дерева не превышает 2 * log(n + 1)] (* <- lang_ru;; *);;
		-> [For any red-black tree with n internal nodes, the depth of the tree is at most 2 * log(n + 1)] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о свойствах красно-черных деревьев)] (* <- lang_ru;; *);
		[Stat. (Properties of red-black trees theorem)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_tree_depth;
		concept_vertex;
		rrel_vertex
	};;
*);;

statement -> statement_of_insertion_into_red_black_tree (*
	-> rrel_key_sc_element: concept_red_black_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Алгоритм вставки в красно-черное дерево поддерживает свойства красно-черного дерева и работает за O(log n) времени] (* <- lang_ru;; *);;
		-> [The red-black tree insertion algorithm maintains the properties of the red-black tree and runs in O(log n) time] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Алгоритм вставки в красно-черное дерево)] (* <- lang_ru;; *);
		[Stat. (Red-black tree insertion algorithm)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_insertion;
		concept_time_complexity
	};;
*);;

statement -> statement_of_deletion_from_red_black_tree (*
	-> rrel_key_sc_element: concept_red_black_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Алгоритм удаления из красно-черного дерева поддерживает свойства красно-черного дерева и работает за O(log n) времени] (* <- lang_ru;; *);;
		-> [The red-black tree deletion algorithm maintains the properties of the red-black tree and runs in O(log n) time] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Алгоритм удаления из красно-черного дерева)] (* <- lang_ru;; *);
		[Stat. (Red-black tree deletion algorithm)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_deletion;
		concept_time_complexity
	};;
*);;

statement -> statement_of_height_red_black_tree (*
	-> rrel_key_sc_element: concept_red_black_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Высота красно-черного дерева не превышает 2 * log(n + 1), где n-количество узлов в дереве] (* <- lang_ru;; *);;
		-> [The height of a red-black tree is no more than 2 * log(n + 1), where n is the number of nodes in the tree] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Высота красно-черного дерева)] (* <- lang_ru;; *);
		[Stat. (Height of a red-black tree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_tree_height;
		concept_vertex;
		rrel_vertex
	};;
*);;

statement -> statement_of_balancing_red_black_tree (*
	-> rrel_key_sc_element: concept_red_black_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Балансировка красно-черного дерева производится путем поворотов поддеревьев, сохраняя свойства красно-черного дерева] (* <- lang_ru;; *);;
		-> [Balancing a red-black tree is achieved through subtree rotations, while maintaining the properties of the red-black tree] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Балансировка красно-черного дерева)] (* <- lang_ru;; *);
		[Stat. (Balancing a red-black tree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_balancing;
		concept_subtree
	};;
*);;

statement -> statement_of_applications_red_black_tree (*
	-> rrel_key_sc_element: concept_red_black_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Красно-черные деревья часто используются в реализации алгоритмов сбалансированного двоичного дерева поиска, например, в Java Collections] (* <- lang_ru;; *);;
		-> [Red-black trees are widely used in implementing balanced binary search tree algorithms, for example in Java Collections] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Применения красно-черных деревьев)] (* <- lang_ru;; *);
		[Stat. (Applications of red-black trees)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_binary_search_tree
	};;
*);;

sc_node_class ->
	concept_binary_search_tree;
	concept_balanced_tree;
	concept_vertex;
	concept_tree_depth;
	concept_vertex;
	concept_insertion;
	concept_time_complexity;
	concept_deletion;
	concept_time_complexity;
	concept_tree_height;
	concept_vertex;
	concept_balancing;
	concept_subtree;
	concept_binary_search_tree;;

sc_node_norole_relation ->
	nrel_color;;

sc_node_role_relation ->
	rrel_vertex;
	rrel_vertex;
	rrel_vertex;;
