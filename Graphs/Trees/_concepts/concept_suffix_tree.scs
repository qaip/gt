concept_suffix_tree
=> nrel_main_idtf:
	[суффиксное дерево] (* <- lang_ru;; *);
	[suffix tree] (* <- lang_en;; *);;

definition -> definition_of_suffix_tree (*
	-> rrel_key_sc_element: concept_suffix_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Специальная структура данных, используемая для эффективного поиска подстрок в строке] (* <- lang_ru;; *);;
		-> [A specialized data structure used for efficient substring searching in a string] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (суффиксное дерево)] (* <- lang_ru;; *);
		[Def. (suffix tree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_data_structure;
		concept_substring_search
	};;
*);;

statement -> statement_of_theorem_construction_time_of_suffix_tree (*
	-> rrel_key_sc_element: concept_suffix_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Суффиксное дерево может быть построено за линейное время O(n)] (* <- lang_ru;; *);;
		-> [A suffix tree can be constructed in linear time O(n)] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о времени построения суффиксного дерева)] (* <- lang_ru;; *);
		[Stat. (Construction time theorem of suffix tree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_time_complexity
	};;
*);;

statement -> statement_of_theorem_substring_search_time_of_suffix_tree (*
	-> rrel_key_sc_element: concept_suffix_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Поиск подстроки в суффиксном дереве может быть выполнен за время O(m), где m-длина искомой подстроки] (* <- lang_ru;; *);;
		-> [Substring searching in a suffix tree can be performed in O(m) time, where m is the length of the sought substring] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о времени поиска подстроки суффиксного дерева)] (* <- lang_ru;; *);
		[Stat. (Substring searching time theorem of suffix tree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_substring_search;
		concept_time_complexity
	};;
*);;

sc_node_class ->
	concept_data_structure;
	concept_substring_search;
	concept_time_complexity;
	concept_substring_search;
	concept_time_complexity;;
