concept_sorting_tree
=> nrel_main_idtf:
	[сортирующее дерево] (* <- lang_ru;; *);
	[sorting tree] (* <- lang_en;; *);;

definition -> definition_of_sorting_tree (*
	-> rrel_key_sc_element: concept_sorting_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Двоичное дерево, которое автоматически сортирует входные элементы при вставке] (* <- lang_ru;; *);;
		-> [A binary tree that automatically sorts input elements when inserted] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (сортирующее дерево)] (* <- lang_ru;; *);
		[Def. (sorting tree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_binary_tree;
		nrel_insertion
	};;
*);;

statement -> statement_of_theorem_sorting_time_of_sorting_tree (*
	-> rrel_key_sc_element: concept_sorting_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Сортирующее дерево может быть построено за O(n log n) времени] (* <- lang_ru;; *);;
		-> [A sorting tree can be constructed in O(n log n) time] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о времени сортировки сортирующего дерева)] (* <- lang_ru;; *);
		[Stat. (Sorting time theorem of sorting tree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_time_complexity
	};;
*);;

statement -> statement_of_theorem_lower_bound_of_sorting_tree (*
	-> rrel_key_sc_element: concept_sorting_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Нижняя граница времени сортировки элементов через дерево-O(n log n)] (* <- lang_ru;; *);;
		-> [The lower bound for sorting elements through a tree is O(n log n)] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о нижней границе времени сортировки сортирующего дерева)] (* <- lang_ru;; *);
		[Stat. (Lower bound theorem sorting time of sorting tree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_time_complexity;
		concept_boundary
	};;
*);;

statement -> statement_of_theorem_height_of_sorting_tree (*
	-> rrel_key_sc_element: concept_sorting_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Высота сортирующего дерева не превышает O(log n)] (* <- lang_ru;; *);;
		-> [The height of a sorting tree is no more than O(log n)] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о высоте сортирующего дерева)] (* <- lang_ru;; *);
		[Stat. (Sorting tree height theorem)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_tree_depth
	};;
*);;

statement -> statement_of_theorem_kth_element_of_sorting_tree (*
	-> rrel_key_sc_element: concept_sorting_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [k-ый элемент может быть найден за время O(log n) в отсортированном дереве] (* <- lang_ru;; *);;
		-> [The kth element can be found in O(log n) time in a sorted tree] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о k-м элементе сортирующего дерева)] (* <- lang_ru;; *);
		[Stat. (Kth element theorem of sorting tree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_time_complexity
	};;
*);;

statement -> statement_of_sorting_tree_insertion_deletion (*
	-> rrel_key_sc_element: concept_sorting_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Элементы могут быть вставлены и удалены из дерева за время O(log n)] (* <- lang_ru;; *);;
		-> [Elements can be inserted and deleted from the tree in O(log n) time] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Вставка и удаление элементов сортирующего дерева)] (* <- lang_ru;; *);
		[Stat. (Inserting and deleting sorting tree elements)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_insertion;
		concept_deletion;
		concept_time_complexity
	};;
*);;

statement -> statement_of_ssorting_tree_balancing (*
	-> rrel_key_sc_element: concept_sorting_tree;;

	<= nrel_sc_text_translation: ... (*
		-> [Дерево может быть автоматически сбалансировано за время O(n log n)] (* <- lang_ru;; *);;
		-> [The tree can be automatically balanced in O(n log n) time] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Балансировка сортирующего дерева)] (* <- lang_ru;; *);
		[Stat. (Balancing a sorting tree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_balancing;
		concept_time_complexity
	};;
*);;

sc_node_class ->
	concept_binary_tree;
	concept_time_complexity;
	concept_time_complexity;
	concept_boundary;
	concept_tree_depth;
	concept_time_complexity;
	concept_insertion;
	concept_deletion;
	concept_time_complexity;
	concept_balancing;
	concept_time_complexity;;

sc_node_norole_relation ->
	nrel_insertion;;
