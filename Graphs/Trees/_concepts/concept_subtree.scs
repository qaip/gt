concept_subtree
=> nrel_main_idtf:
	[поддерево] (* <- lang_ru;; *);
	[subtree] (* <- lang_en;; *);;

definition -> definition_of_subtree (*
	-> rrel_key_sc_element: concept_subtree;;

	<= nrel_sc_text_translation: ... (*
		-> [Дерево, состоящее из узла и всех его потомков] (* <- lang_ru;; *);;
		-> [A tree consisting of a node and all of its descendants] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (поддерево)] (* <- lang_ru;; *);
		[Def. (subtree)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_vertex;
		rrel_vertex;
		nrel_tree_descendant
	};;
*);;

statement -> statement_of_subtree_isomorphism_theorem (*
	-> rrel_key_sc_element: concept_subtree;;

	<= nrel_sc_text_translation: ... (*
		-> [Два дерева являются изоморфными тогда и только тогда, когда они содержат одинаковые поддеревья] (* <- lang_ru;; *);;
		-> [Two trees are isomorphic if and only if they contain the same subtrees] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема об изоморфизме поддеревьев)] (* <- lang_ru;; *);
		[Stat. (Isomorphism theorem for subtrees)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_isomorphic_tree
	};;
*);;

statement -> statement_of_subtree_size_theorem (*
	-> rrel_key_sc_element: concept_subtree;;

	<= nrel_sc_text_translation: ... (*
		-> [Высота поддерева равен суммарному размеру его потомков плюс один (узел самого поддерева)] (* <- lang_ru;; *);;
		-> [The height of a subtree is equal to the sum of the sizes of its descendants plus one (the node itself)] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о высота поддерева)] (* <- lang_ru;; *);
		[Stat. (Subtree height theorem)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_tree_height;
		nrel_tree_descendant
	};;
*);;

statement -> statement_of_subtree_root_theorem (*
	-> rrel_key_sc_element: concept_subtree;;

	<= nrel_sc_text_translation: ... (*
		-> [Корнем поддерева является узел, от которого начинается поддерево] (* <- lang_ru;; *);;
		-> [The root of a subtree is the node from which the subtree starts] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о корне поддерева)] (* <- lang_ru;; *);
		[Stat. (Subtree root theorem)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_vertex;
		concept_tree_root;
		rrel_vertex;
		rrel_tree_root
	};;
*);;

statement -> statement_of_subtree_pruning_theorem (*
	-> rrel_key_sc_element: concept_subtree;;

	<= nrel_sc_text_translation: ... (*
		-> [Обрезание поддерева заключается в удалении узла и всех его потомков. После обрезания поддерева, каждый узел получившегося дерева либо является листом, либо имеет не более одного потомка] (* <- lang_ru;; *);;
		-> [Pruning a subtree involves removing a node and all of its descendants. After pruning a subtree, each node in the resulting tree is either a leaf or has no more than one child] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о обрезании поддерева)] (* <- lang_ru;; *);
		[Stat. (Subtree pruning theorem)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_pruning;
		concept_leaf;
		concept_vertex;
		rrel_leaf;
		rrel_vertex;
		nrel_tree_descendant
	};;
*);;

statement -> statement_of_subtree_isolation_theorem (*
	-> rrel_key_sc_element: concept_subtree;;

	<= nrel_sc_text_translation: ... (*
		-> [Изоляция поддерева заключается в удалении узла и всех его потомков, а затем замене его на новый узел, который является предкомом удаленного узла. Таким образом, изолированное поддерево заменяется на новое дерево, которое включает в себя новый узел и все потомки удаленного узла] (* <- lang_ru;; *);;
		-> [Isolating a subtree involves removing a node and all of its descendants, and then replacing it with a new node that is an ancestor to the removed node. Thus, the isolated subtree is replaced with a new tree that includes the new node and all of the descendants of the removed node] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема об изоляции поддерева)] (* <- lang_ru;; *);
		[Stat. (Subtree isolation theorem)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_isolation;
		concept_tree;
		concept_vertex;
		rrel_vertex;
		nrel_tree_descendant;
		nrel_tree_parent
	};;
*);;

sc_node_class ->
	concept_vertex;
	concept_isomorphic_tree;
	concept_tree_height;
	concept_vertex;
	concept_tree_root;
	concept_pruning;
	concept_leaf;
	concept_vertex;
	concept_isolation;
	concept_tree;
	concept_vertex;;

sc_node_norole_relation ->
	nrel_tree_descendant;
	nrel_tree_descendant;
	nrel_tree_descendant;
	nrel_tree_descendant;
	nrel_tree_parent;;

sc_node_role_relation ->
	rrel_vertex;
	rrel_vertex;
	rrel_tree_root;
	rrel_leaf;
	rrel_vertex;
	rrel_vertex;;
