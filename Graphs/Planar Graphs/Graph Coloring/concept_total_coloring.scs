concept_total_coloring
=> nrel_main_idtf:
	[полная раскраска] (* <- lang_ru;; *);
	[total coloring] (* <- lang_en;; *);;

definition -> definition_of_total_coloring (*
	-> rrel_key_sc_element: concept_total_coloring;;

	<= nrel_sc_text_translation: ... (*
		-> [Раскраска, в которой каждой вершине и каждому ребру графа присваивается уникальный цвет] (* <- lang_ru;; *);;
		-> [A coloring where each vertex and each edge of the graph is assigned a unique color] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (полная раскраска)] (* <- lang_ru;; *);
		[Def. (total coloring)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph;
		concept_vertex;
		concept_edge;
		rrel_vertex;
		rrel_edge
	};;
*);;

statement -> statement_of_total_coloring_property (*
	-> rrel_key_sc_element: concept_total_coloring;;

	<= nrel_sc_text_translation: ... (*
		-> [Для полного раскрашиваемого графа количество цветов, необходимых для полной раскраски, равно сумме количества вершин и ребер в графе] (* <- lang_ru;; *);;
		-> [For a graph to be totally colored, the number of colors required is equal to the sum of the number of vertices and edges in the graph] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Свойства полной раскраски)] (* <- lang_ru;; *);
		[Stat. (Properties of total coloring)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_vertex;
		concept_edge;
		rrel_vertex;
		rrel_edge
	};;
*);;

statement -> statement_of_total_coloring_existence (*
	-> rrel_key_sc_element: concept_total_coloring;;

	<= nrel_sc_text_translation: ... (*
		-> [Пусть G-связный граф. Тогда число цветов, необходимое для полной раскраски G, равно наибольшей степени вершины в G + 1] (* <- lang_ru;; *);;
		-> [Let G be a connected graph. Then the minimum number of colors required for a total coloring of G is equal to the maximum degree of a vertex in G + 1] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Существование полной раскраски)] (* <- lang_ru;; *);
		[Stat. (Existence of total coloring)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph_connectivity;
		concept_vertex_degree
	};;
*);;

sc_node_class ->
	concept_graph;
	concept_vertex;
	concept_edge;
	concept_vertex;
	concept_edge;
	concept_graph_connectivity;
	concept_vertex_degree;;

sc_node_role_relation ->
	rrel_vertex;
	rrel_edge;
	rrel_vertex;
	rrel_edge;;
