concept_directed_graph
=> nrel_main_idtf:
	[ориентированный граф] (* <- lang_ru;; *);
	[directed graph] (* <- lang_en;; *);

=> nrel_idtf:
	[орграф] (* <- lang_ru;; *);
	[digraph] (* <- lang_en;; *);;

definition -> definition_of_directed_graph (*
	-> rrel_key_sc_element: concept_directed_graph;;

	<= nrel_sc_text_translation: ... (*
		-> [Ориентированный граф является парой множеств V, A, где V является множеством вершин, A является множеством ориентированных ребер, которые называются дугами] (* <- lang_ru;; *);;
		-> [A directed graph is a pair of sets V, A, where V is a set of vertices, A is a set of directed edges, which are called arcs] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (ориентированный граф)] (* <- lang_ru;; *);
		[Def. (directed graph)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph;
		concept_arc;
		concept_edge;
		concept_vertex;
		rrel_edge;
		rrel_vertex
	};;
*);;

statement -> statement_of_weak_directed_graph (*
	-> rrel_key_sc_element: concept_directed_graph;;

	<= nrel_sc_text_translation: ... (*
		-> [Ориентированный граф слабый тогда и только тогда, когда он имеет цепь] (* <- lang_ru;; *);;
		-> [A directed graph is weak if it has a chain] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (слабость орграфа)] (* <- lang_ru;; *);
		[Stat. (digraph weakness)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_directed_graph;
		nrel_chain
	};;
*);;

statement -> statement_of_strongly_connected_directed_graph (*
	-> rrel_key_sc_element: concept_directed_graph;;

	<= nrel_sc_text_translation: ... (*
		-> [Ориентированный граф сильно связный, если для каждой пары вершин в графе существует путь, идущий из первой вершины во вторую] (* <- lang_ru;; *);;
		-> [A directed graph is strongly connected if there is a path from any vertex to any other vertex in the graph] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (сильная связность орграфа)] (* <- lang_ru;; *);
		[Stat. (strong connectivity of a digraph)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_directed_graph;
		concept_path;
		concept_vertex
	};;
*);;

statement -> statement_of_acyclic_directed_graph (*
	-> rrel_key_sc_element: concept_directed_graph;;

	<= nrel_sc_text_translation: ... (*
		-> [Ориентированный граф является ациклическим, если в нём нет ориентированных циклов] (* <- lang_ru;; *);;
		-> [A directed graph is acyclic if there are no directed cycles in it] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (ациклический орграф)] (* <- lang_ru;; *);
		[Stat. (acyclic digraph)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_directed_graph;
		nrel_cycle
	};;
*);;

statement -> statement_of_topological_sorting (*
	-> rrel_key_sc_element: concept_directed_graph;;

	<= nrel_sc_text_translation: ... (*
		-> [Топологической сортировкой называется упорядочивание вершин орграфа таким образом, что каждое ребро идёт от вершины с меньшим номером к вершине с большим номером] (* <- lang_ru;; *);;
		-> [Topological sorting is arranging vertices of a digraph so that every directed edge goes from a vertex with a smaller number to a vertex with a larger number] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (топологическая сортировка)] (* <- lang_ru;; *);
		[Stat. (topological sorting)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_vertex;
		concept_edge;
		rrel_vertex;
		rrel_edge
	};;
*);;

statement -> statement_of_graph_reduction_directed_graph (*
	-> rrel_key_sc_element: concept_directed_graph;;

	<= nrel_sc_text_translation: ... (*
		-> [Любой граф можно свести к ориентированному графу, присваивая каждому ребру направление] (* <- lang_ru;; *);;
		-> [Any graph can be reduced to a directed graph by assigning a direction to each edge] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (сведение графа к орграфу)] (* <- lang_ru;; *);
		[Stat. (graph reduction to a digraph)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph;
		concept_edge;
		concept_arc;
		rrel_edge;
		rrel_arc
	};;
*);;

sc_node_class ->
	concept_graph;
	concept_arc;
	concept_edge;
	concept_vertex;
	concept_directed_graph;
	concept_directed_graph;
	concept_path;
	concept_vertex;
	concept_directed_graph;
	concept_vertex;
	concept_edge;
	concept_graph;
	concept_edge;
	concept_arc;;

sc_node_norole_relation ->
	nrel_chain;
	nrel_cycle;;

sc_node_role_relation ->
	rrel_edge;
	rrel_vertex;
	rrel_vertex;
	rrel_edge;
	rrel_edge;
	rrel_arc;;
