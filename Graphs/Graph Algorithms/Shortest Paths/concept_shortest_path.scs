concept_shortest_path
=> nrel_main_idtf:
	[задача о кратчайшем пути] (* <- lang_ru;; *);
	[shortest path problem] (* <- lang_en;; *);


=> nrel_inclusion:
concept_dijkstra_algorithm;
concept_floyd_warshall_algorithm;;

definition -> definition_of_shortest_path (*
	-> rrel_key_sc_element: concept_shortest_path;;

	<= nrel_sc_text_translation: ... (*
		-> [Задача поиска самого короткого пути между двумя вершинами на графе, в которой минимизируется вес пути] (* <- lang_ru;; *);;
		-> [The problem of finding a path between two vertices in a graph such that the path weight is minimized] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (задача о кратчайшем пути)] (* <- lang_ru;; *);
		[Def. (shortest path problem)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph;
		concept_vertex;
		concept_graph_path;
		concept_graph_path_weight;
		rrel_vertex;
		rrel_graph_path
	};;
*);;

statement -> statement_of_shortest_path_demand (*
	-> rrel_key_sc_element: concept_shortest_path;;

	<= nrel_sc_text_translation: ... (*
		-> [Задача поиска кратчайшего пути используется при построении маршрутов в картографических сервисах. В таком случае можно свести задачу к отысканию кратчайшего пути, вес которого выражает расстояние между пунктами назначения, в графе, у которого вершинами являются ключевые точки маршрута, а рёбрами являются дороги] (* <- lang_ru;; *);;
		-> [The task of finding the shortest path is used when building routes in map services. In this case, we can reduce the problem to finding the shortest path, the weight of which expresses the distance between destinations, in a graph whose vertices are the key points of the route, and the edges are the roads] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Востребованность задачи о поиске кратчайшего пути)] (* <- lang_ru;; *);
		[Stat. (Shortest path problem demand)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph;
		concept_vertex;
		concept_edge;
		concept_graph_path_weight;
		rrel_vertex;
		rrel_edge
	};;
*);;

sc_node_class ->
	concept_graph;
	concept_vertex;
	concept_graph_path;
	concept_graph_path_weight;
	concept_graph;
	concept_vertex;
	concept_edge;
	concept_graph_path_weight;;

sc_node_role_relation ->
	rrel_vertex;
	rrel_graph_path;
	rrel_vertex;
	rrel_edge;;
