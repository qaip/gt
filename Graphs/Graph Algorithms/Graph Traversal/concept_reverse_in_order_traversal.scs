concept_reverse_in_order_traversal
=> nrel_main_idtf:
	[обратный упорядоченный обход бинарного дерева] (* <- lang_ru;; *);
	[reverse in-order depth traversal] (* <- lang_en;; *);

=> nrel_idtf:
	[reverse in-order traversal] (* <- lang_en;; *);;

definition -> definition_of_reverse_in_order_traversal (*
	-> rrel_key_sc_element: concept_reverse_in_order_traversal;;

	<= nrel_sc_text_translation: ... (*
		-> [Одна из разновидностей обхода бинарного дерева в глубину] (* <- lang_ru;; *);;
		-> [One of the varieties of binary tree depth traversal] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (обратный упорядоченный обход бинарного дерева)] (* <- lang_ru;; *);
		[Def. (reverse in-order depth traversal)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_binary_tree;
		concept_depth_traversal;
		concept_tree_traversal
	};;
*);;

statement -> statement_of_reverse_in_order_traversal_explanation (*
	-> rrel_key_sc_element: concept_reverse_in_order_traversal;;

	<= nrel_sc_text_translation: ... (*
		-> [Обратный упорядоченный обход бинарного дерева состоит из трёх этапов. На первом этапе обходится правая смежная с текущей вершина. На втором этапе просматривается текущая вершина. На третьем этапе обходится оставшаяся смежная с текущей вершина] (* <- lang_ru;; *);;
		-> [In-order traversal of binary tree consists of 3 stages. On the first stage right adjecent vertex of the current vertex is traversed. On the second stage the current vertex is checked. On the third stage remaining adjecent vertex of the current vertex is traversed] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Объяснение обратного упорядоченного обхода дерева)] (* <- lang_ru;; *);
		[Stat. (Reverse in-order traversal explanation)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_vertex;
		concept_binary_tree;
		rrel_vertex;
		nrel_vertex_adjacency
	};;
*);;

sc_node_class ->
	concept_binary_tree;
	concept_depth_traversal;
	concept_tree_traversal;
	concept_vertex;
	concept_binary_tree;;

sc_node_norole_relation ->
	nrel_vertex_adjacency;;

sc_node_role_relation ->
	rrel_vertex;;
