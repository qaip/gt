concept_eulerian_path
=> nrel_main_idtf:
	[эйлеров путь] (* <- lang_ru;; *);
	[eulerian path] (* <- lang_en;; *);

=> nrel_idtf:
	[полуэйлеров путь] (* <- lang_ru;; *);
	[semi-Eulerian path] (* <- lang_en;; *);;

definition -> definition_of_eulerian_path (*
	-> rrel_key_sc_element: concept_eulerian_path;;

	<= nrel_sc_text_translation: ... (*
		-> [Путь, проходящий по каждому ребру графа ровно один раз] (* <- lang_ru;; *);;
		-> [A path that passes through each edge of the graph exactly once] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (эйлеров путь)] (* <- lang_ru;; *);
		[Def. (eulerian path)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph_path;
		concept_vertex;
		concept_graph;
		concept_edge;
		rrel_edge;
		rrel_vertex
	};;
*);;

statement -> statement_of_eulerian_path_exists (*
	-> rrel_key_sc_element: concept_eulerian_path;;

	<= nrel_sc_text_translation: ... (*
		-> [В связном графе существует эйлеров путь тогда и только тогда, когда степень каждой вершины чётна] (* <- lang_ru;; *);;
		-> [In a connected graph, an Eulerian path exists if and only if the degree of each vertex is even] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Существование эйлерова пути)] (* <- lang_ru;; *);
		[Stat. (Existence of Eulerian path)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_connected_graph;
		concept_vertex_degree
	};;
*);;

statement -> statement_of_semi_eulerian_path_exists (*
	-> rrel_key_sc_element: concept_eulerian_path;;

	<= nrel_sc_text_translation: ... (*
		-> [В связном графе существует полуэйлеров путь тогда и только тогда, когда ровно две вершины имеют нечётную степень] (* <- lang_ru;; *);;
		-> [In a connected graph, a semi-Eulerian path exists if and only if exactly two vertices have odd degree] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Существование полуэйлерова пути)] (* <- lang_ru;; *);
		[Stat. (Existence of semi-Eulerian path)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_connected_graph;
		concept_vertex_degree
	};;
*);;

sc_node_class ->
	concept_graph_path;
	concept_vertex;
	concept_graph;
	concept_edge;
	concept_connected_graph;
	concept_vertex_degree;
	concept_connected_graph;
	concept_vertex_degree;;

sc_node_role_relation ->
	rrel_edge;
	rrel_vertex;;
