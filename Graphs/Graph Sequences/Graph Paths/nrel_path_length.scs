nrel_path_length
=> nrel_main_idtf:
	[длина пути графа*] (* <- lang_ru;; *);
	[graph path length*] (* <- lang_en;; *);;

definition -> definition_of_path_length (*
	-> rrel_key_sc_element: nrel_path_length;;

	<= nrel_sc_text_translation: ... (*
		-> [Число рёбер, используемых в пути графа, при этом многократно используемые рёбра считаются соответствующее число раз] (* <- lang_ru;; *);;
		-> [The number of edges used in the path of the graph, while repeatedly used edges are counted the corresponding number of times] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (длина пути графа)] (* <- lang_ru;; *);
		[Def. (graph path length)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph_path;
		concept_edge;
		rrel_edge
	};;
*);;

statement -> statement_of_proposition_weighted_path (*
	-> rrel_key_sc_element: nrel_path_length;;

	<= nrel_sc_text_translation: ... (*
		-> [Путь в графе, в котором каждому ребру присвоено некоторое число, называется взвешенным путем] (* <- lang_ru;; *);;
		-> [A path in a graph where each edge is assigned a number is called a weighted path] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Взвешенный путь)] (* <- lang_ru;; *);
		[Stat. (Weighted Path)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph_path;
		concept_edge;
		rrel_edge;
		nrel_rib_weight
	};;
*);;

statement -> statement_of_path_equals_zero (*
	-> rrel_key_sc_element: nrel_path_length;;

	<= nrel_sc_text_translation: ... (*
		-> [Длина пути графа может равняться нулю, если путь состоит только из одной вершины] (* <- lang_ru;; *);;
		-> [The length of graph path can be zero if the path consists of only one vertex] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Условие эквивалентности длины пути нулю)] (* <- lang_ru;; *);
		[Stat. (Zero path length condition)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph_path;
		concept_vertex;
		rrel_vertex
	};;
*);;

arity->...
    (*
        ->nrel_path_length;;
        =>nrel_measurement:2;;
    *);;

nrel_path_length=>nrel_first_domain:concept_graph;
    =>nrel_second_domain:number;
        => nrel_definitional_domain:
	...
	(*
		 <=nrel_combination:
        {
			number;
            concept_graph
        };;
	*);;

    relation=>nrel_inclusion:binary_relation;;
    relation=>nrel_inclusion:oriented_relation;;

binary_relation=>nrel_inclusion:antireflexive_relation(*->nrel_path_length;;*);
    =>nrel_inclusion:antitransitive_relation(*->nrel_path_length;;*);
    =>nrel_inclusion:antisymmetric_relation(*->nrel_path_length;;*);;
    oriented_relation->nrel_path_length;;

sc_node_norole_relation -> nrel_path_length;;

sc_node_class ->
	concept_graph_path;
	concept_edge;
	concept_graph_path;
	concept_edge;
	concept_graph_path;
	concept_vertex;;

sc_node_norole_relation ->
	nrel_rib_weight;;

sc_node_role_relation ->
	rrel_edge;
	rrel_edge;
	rrel_vertex;;
