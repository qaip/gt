nrel_path_weight
=> nrel_main_idtf:
	[вес пути графа*] (* <- lang_ru;; *);
	[graph path_weight*] (* <- lang_en;; *);

=> nrel_idtf:
	[цена пути*] (* <- lang_ru;; *);
	[длина пути*] (* <- lang_ru;; *);
	[cost of path*] (* <- lang_en;; *);
	[length of path*] (* <- lang_en;; *);;

definition -> definition_of_graph_path_weight (*
	-> rrel_key_sc_element: nrel_path_weight;;

	<= nrel_sc_text_translation: ... (*
		-> [Сумма весов рёбер пути во взвешенном графе] (* <- lang_ru;; *);;
		-> [A sum of the weights of the traversed edges in a weighted graph] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (вес пути графа)] (* <- lang_ru;; *);
		[Def. (graph path_weight)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_weighted_graph;
		concept_edge;
		concept_graph;
		rrel_edge
	};;
*);;

statement -> statement_of_bellman_ford_algorithm (*
	-> rrel_key_sc_element: nrel_path_weight;;

	<= nrel_sc_text_translation: ... (*
		-> [Алгоритм, который находит кратчайший путь во взвешенном графе с отрицательными весами ребер] (* <- lang_ru;; *);;
		-> [An algorithm that finds the shortest path in a weighted graph with negative edge weights] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Алгоритм Беллмана-Форда)] (* <- lang_ru;; *);
		[Stat. (Bellman-Ford algorithm)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_shortest_path;
		concept_weighted_graph;
		nrel_rib_weight
	};;
*);;

arity->...
    (*
        ->nrel_path_weight;;
        =>nrel_measurement:2;;
    *);;

nrel_path_weight=>nrel_first_domain:concept_graph;
    =>nrel_second_domain:number;
        => nrel_definitional_domain:
	...
	(*
		 <=nrel_combination:
        {
            concept_graph;
			number
        };;
	*);;

    relation=>nrel_inclusion:binary_relation;;
    relation=>nrel_inclusion:oriented_relation;;

binary_relation=>nrel_inclusion:antireflexive_relation(*->nrel_path_weight;;*);
    =>nrel_inclusion:antitransitive_relation(*->nrel_path_weight;;*);
    =>nrel_inclusion:antisymmetric_relation(*->nrel_path_weight;;*);;
    oriented_relation->nrel_path_weight;;

sc_node_norole_relation -> nrel_path_weight;;

sc_node_class ->
	concept_weighted_graph;
	concept_edge;
	concept_graph;
	concept_shortest_path;
	concept_weighted_graph;;

sc_node_norole_relation ->
	nrel_rib_weight;;

sc_node_role_relation ->
	rrel_edge;;
