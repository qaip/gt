concept_cycle_weight
=> nrel_main_idtf:
	[вес цикла*] (* <- lang_ru;; *);
	[cycle weight*] (* <- lang_en;; *);;

definition -> definition_of_cycle_weight (*
	-> rrel_key_sc_element: concept_cycle_weight;;

	<= nrel_sc_text_translation: ... (*
		-> [Суммарный вес ребер в цикле графа] (* <- lang_ru;; *);;
		-> [The total weight of the edges in a cycle of a graph] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (вес цикла)] (* <- lang_ru;; *);
		[Def. (cycle weight)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph_cycle;
		concept_edge;
		rrel_edge;
		nrel_rib_weight
	};;
*);;

statement -> statement_of_cycle_weight_minimum_theorem (*
	-> rrel_key_sc_element: concept_cycle_weight;;

	<= nrel_sc_text_translation: ... (*
		-> [Минимальный вес цикла в графе является минимальным из весов циклов, проходящих через данный узел] (* <- lang_ru;; *);;
		-> [The minimum weight of a cycle in a graph is the minimum weight among cycles passing through a given node] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о минимальном весе цикла)] (* <- lang_ru;; *);
		[Stat. (Minimum cycle weight theorem)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph_cycle;
		concept_vertex;
		rrel_vertex;
		nrel_rib_weight
	};;
*);;

statement -> statement_of_hamiltonian_cycle_weight_theorem (*
	-> rrel_key_sc_element: concept_cycle_weight;;

	<= nrel_sc_text_translation: ... (*
		-> [Взвешенный связный граф содержит гамильтонов цикл, если его вес не превышает веса любого другого цикла в графе] (* <- lang_ru;; *);;
		-> [A weighted connected graph contains a Hamiltonian cycle if its weight does not exceed the weight of any other cycle in the graph] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о весе гамильтонова цикла)] (* <- lang_ru;; *);
		[Stat. (Hamiltonian cycle weight theorem)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_hamiltonian_cycle;
		concept_weighted_graph;
		nrel_rib_weight
	};;
*);;

arity->...
    (*
        ->concept_cycle_weight;;
        =>nrel_measurement:2;;
    *);;

concept_cycle_weight=>nrel_first_domain:concept_graph;
    =>nrel_second_domain:number;
        => nrel_definitional_domain:
	...
	(*
		 <=nrel_combination:
        {
			number
            concept_graph
        };;
	*);;

    relation=>nrel_inclusion:binary_relation;;
    relation=>nrel_inclusion:oriented_relation;;

binary_relation=>nrel_inclusion:antireflexive_relation(*->concept_cycle_weight;;*);
    =>nrel_inclusion:antitransitive_relation(*->concept_cycle_weight;;*);
    =>nrel_inclusion:antisymmetric_relation(*->concept_cycle_weight;;*);;
    oriented_relation->concept_cycle_weight;;

sc_node_norole_relation -> concept_cycle_weight;;

sc_node_class ->
	concept_graph_cycle;
	concept_edge;
	concept_graph_cycle;
	concept_vertex;
	concept_hamiltonian_cycle;
	concept_weighted_graph;;

sc_node_norole_relation ->
	nrel_rib_weight;;

sc_node_role_relation ->
	rrel_edge;
	rrel_vertex;;
