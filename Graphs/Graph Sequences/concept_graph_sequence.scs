concept_graph_sequence
=> nrel_main_idtf:
	[последовательность] (* <- lang_ru;; *);
	[sequence] (* <- lang_en;; *);

=> nrel_idtf:
	[маршрут] (* <- lang_ru;; *);
	[графовая последовательность] (* <- lang_ru;; *);
	[route] (* <- lang_en;; *);
	[graph sequence] (* <- lang_en;; *);


=> nrel_inclusion:
concept_graph_path;
concept_graph_cycle;
concept_graph_chain;;

definition -> definition_of_graph_sequence (*
	-> rrel_key_sc_element: concept_graph_sequence;;

	<= nrel_sc_text_translation: ... (*
		-> [Маршрутом длины m называется некоторая последовательность m рёбер, такая, что вершины двух соседних рёбер последовательности совпадают] (* <- lang_ru;; *);;
		-> [Маршрутом можно считать такую последовательность вершин, что любая соседняя пара вершин является ребром графа] (* <- lang_ru;; *);;
		-> [A sequence of length m is some sequence of m edges such that the vertices of two adjacent edges of the sequence coincide] (* <- lang_en;; *);;
		-> [A route can be considered such a sequence of vertices that any neighboring pair of vertices is an edge of the graph] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (последовательность)] (* <- lang_ru;; *);
		[Def. (sequence)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_edge;
		concept_vertex;
		rrel_edge;
		rrel_vertex
	};;
*);;

statement -> statement_of_sequnce_vertexes_naming (*
	-> rrel_key_sc_element: concept_graph_sequence;;

	<= nrel_sc_text_translation: ... (*
		-> [Верршина 0 последовательности длины k называется начальной, а вершина k называется конечной, все остальные вершины назвываются внутренними] (* <- lang_ru;; *);;
		-> [Vertex 0 of a sequence of length k is called initial, and vertex k is called final, all other vertices are called internal] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Распределение названий между вершинами последовательности)] (* <- lang_ru;; *);
		[Stat. (Distribution of names between the vertices of the sequence)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_vertex;
		concept_sequence;
		rrel_vertex
	};;
*);;

statement -> statement_of_havel_hakimi_algorithm (*
	-> rrel_key_sc_element: concept_graph_sequence;;

	<= nrel_sc_text_translation: ... (*
		-> [Алгоритм Гавела Хакими-это алгоритм для построения графа с заданной графовой последовательностью] (* <- lang_ru;; *);;
		-> [The Havel-Hakimi algorithm is an algorithm for constructing a graph with a given graph sequence] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Алгоритм Хавела-Хакими)] (* <- lang_ru;; *);
		[Stat. (Havel-Hakimi algorithm)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph_sequence;
		concept_graph
	};;
*);;

sc_node_class ->
	concept_edge;
	concept_vertex;
	concept_vertex;
	concept_sequence;
	concept_graph_sequence;
	concept_graph;;

sc_node_role_relation ->
	rrel_edge;
	rrel_vertex;
	rrel_vertex;;
