nrel_chain_length
=> nrel_main_idtf:
	[длина цепи*] (* <- lang_ru;; *);
	[chain length*] (* <- lang_en;; *);;

definition -> definition_of_chain_length (*
	-> rrel_key_sc_element: nrel_chain_length;;

	<= nrel_sc_text_translation: ... (*
		-> [Количество ребер в цепи] (* <- lang_ru;; *);;
		-> [The number of edges in a chain] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (длина цепи)] (* <- lang_ru;; *);
		[Def. (chain length)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_edge;
		concept_graph_chain;
		rrel_edge
	};;
*);;

statement -> statement_of_longest_chain_theorem (*
	-> rrel_key_sc_element: nrel_chain_length;;

	<= nrel_sc_text_translation: ... (*
		-> [Самая длинная цепь в графе является путь, который содержит максимальное число ребер] (* <- lang_ru;; *);;
		-> [The longest chain in a graph is a path that contains the maximum number of edges] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Теорема о самой длинной цепи)] (* <- lang_ru;; *);
		[Stat. (Longest chain theorem)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph;
		concept_edge;
		concept_graph_chain;
		concept_graph_path;
		rrel_edge
	};;
*);;

arity->...
    (*
        ->nrel_chain_length;;
        =>nrel_measurement:2;;
    *);;

nrel_chain_length=>nrel_first_domain:concept_graph;
    =>nrel_second_domain:number;
        => nrel_definitional_domain:
	...
	(*
		 <=nrel_combination:
        {
			number;
            concept_graph
        };;
	*);;

    relation=>nrel_inclusion:binary_relation;;
    relation=>nrel_inclusion:oriented_relation;;

binary_relation=>nrel_inclusion:antireflexive_relation(*->nrel_chain_length;;*);
    =>nrel_inclusion:antitransitive_relation(*->nrel_chain_length;;*);
    =>nrel_inclusion:antisymmetric_relation(*->nrel_chain_length;;*);;
    oriented_relation->nrel_chain_length;;

sc_node_norole_relation -> nrel_chain_length;;

sc_node_class ->
	concept_edge;
	concept_graph_chain;
	concept_graph;
	concept_edge;
	concept_graph_chain;
	concept_graph_path;;

sc_node_role_relation ->
	rrel_edge;
	rrel_edge;;
