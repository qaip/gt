nrel_graph_cartesian_product
=> nrel_main_idtf:
	[декартово произведение графов*] (* <- lang_ru;; *);
	[graph Cartesian product*] (* <- lang_en;; *);;

definition -> definition_of_nrel_graph_cartesian_product (*
	-> rrel_key_sc_element: nrel_graph_cartesian_product;;

	<= nrel_sc_text_translation: ... (*
		-> [Неролевое отношение, определённое на множестве графов. При этом граф G = (V, E) является декартовым произведением графов G(a) = (V(a), E(a)) и G(b) = (V(b), E(b)) тогда и только тогда, когда V является результатом декартового произведения V(a) и V(b), а любые две вершины (u(a), u(b)) и (v(a), v(b)) смежны, если u(a) = v(a) и принадлежит V(a) и u(b) смежна v(b) и обе вершины принадлежат V(b) или если u(b) = v(b) и принадлежит V(b) и u(a) смежна v(a) и обе вершины принадлежат V(a). V - множество вершин графа G, E - множество рёбер(дуг) графа G, V(a) - множество вершин графа G(a), E(a) - множество рёбер(дуг) графа G(a), V(b) - множество вершин графа G(b), E(b) - множество рёбер(дуг) графа G(b)] (* <- lang_ru;; *);;
		-> [A non-role relation defined on a set of graphs. Moreover, the graph G = (V, E) is the Cartesian product of the graphs G(a) = (V(a), E(a)) and G(b) = (V(b), E(b)) if and only when V is the result of the Cartesian product of V(a) and V(b), and any two vertices (u(a), u(b)) and (v(a), v(b)) are adjacent if u( a) = v(a) and belongs to V(a) and u(b) is adjacent to v(b) and both vertices belong to V(b) or if u(b) = v(b) and belongs to V(b) and u (a) is adjacent to v(a) and both vertices belong to V(a). V - set of vertices of graph G, E - set of edges (arcs) of graph G, V(a) - set of vertices of graph G(a), E(a) - set of edges (arcs) of graph G(a), V(b) - set of vertices of the graph G(b), E(b) - set of edges (arcs) of the graph G(b)] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Опр. (Декартово произведение графов*)] (* <- lang_ru;; *);
		[Def. (Graph Cartesian product*)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph;
        concept_edge;
        concept_arc;
        concept_vertex;
        rrel_edge;
        rrel_arc;
        rrel_vertex
	};;
*);;

statement -> statement_of_nrel_graph_cartesian_product (*
	-> rrel_key_sc_element: nrel_graph_cartesian_product;;

	<= nrel_sc_text_translation: ... (*
		-> [Декартовым произведением графов является граф, множество вершин которого является декартовым произведением исходных графов. Две любые вершины (которые представлены кортежами, состоящими из вершин исходных графов) в полученном графе смежные, если в состав кортежей превой вершины входят вершина одного из исходных графов, которая содержится в кортеже второй вершины; а также в состав кортежей первой и воторой вершины входят смежные между собой вершины из другого исходного графа] (* <- lang_ru;; *);;
		-> [A Cartesian product of graphs is a graph whose vertex set is a Cartesian product of the original graphs. Any two vertices (which are represented by tuples consisting of vertices of the original graphs) in the resulting graph are adjacent if the tuples of the first vertex include the vertex of one of the original graphs, which is contained in the tuple of the second vertex; and also the composition of the tuples of the first and second vertices includes adjacent vertices from another source graph] (* <- lang_en;; *);;
	*);;

	=> nrel_main_idtf:
		[Утв. (Неформальное пояснение Декартового произведения графов*)] (* <- lang_ru;; *);
		[Stat. (Informal explanation of graph Cartesian product*)] (* <- lang_en;; *);;

	=> nrel_using_constants: {
		concept_graph;
        concept_vertex;
        rrel_vertex;
        nrel_vertex_adjacency
	};;
*);;

nrel_graph_cartesian_product=>nrel_first_domain:concept_graph;;
nrel_graph_cartesian_product=>nrel_second_domain:concept_graph;;
nrel_graph_cartesian_product=> nrel_definitional_domain: concept_graph;;



antireflexive_relation->nrel_graph_cartesian_product;;
oriented_relation->nrel_graph_cartesian_product;;
antisymmetric_relation->nrel_graph_cartesian_product;;
transitive_relation->nrel_graph_cartesian_product;;


sc_node_norole_relation->nrel_graph_cartesian_product;;

quasybinary_relation->nrel_graph_cartesian_product;;

sc_node_class ->
    concept_graph;
    concept_edge;
    concept_arc;
    concept_vertex;;

sc_node_role_relation ->
    rrel_edge;
    rrel_arc;
    rrel_vertex;;

sc_node_norole_relation -> vertex_adjacency;;
